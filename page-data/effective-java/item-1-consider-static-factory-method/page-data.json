{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/effective-java/item-1-consider-static-factory-method/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Dev Logs","author":"tykim","siteUrl":"https://disj11.github.io/old","comment":{"disqusShortName":"","utterances":"disj11/disj11.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"712122a9-3747-58bb-9c1c-95b72f5bce5f","excerpt":"생성자 대신 정적 팩터리 메서드를 사용할때의 장점과 단점을 알아보자 장점 1. 이름을 갖을 수 있다. 반환 될 객체의 특성을 명확히 알 수 있는 이름을 지을 수 있다. 예를들어 생성자인  보다 정적 팩터리 메서드인  쪽이 ‘값이 소수인 BigInteger를 반환한다’는 의미를 더 잘 들어낼 수 있다. 또 생성자는 하나의 시그니처로 하나의 생성자만 만들 수 있지만, 정적 팩터리 메서드는 이러한 제약이 없다.…","html":"<p>생성자 대신 정적 팩터리 메서드를 사용할때의 장점과 단점을 알아보자</p>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<h3 id=\"1-이름을-갖을-수-있다\" style=\"position:relative;\"><a href=\"#1-%EC%9D%B4%EB%A6%84%EC%9D%84-%EA%B0%96%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"1 이름을 갖을 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 이름을 갖을 수 있다.</h3>\n<p>반환 될 객체의 특성을 명확히 알 수 있는 이름을 지을 수 있다. 예를들어 생성자인 <code class=\"language-text\">BigInteger(int, int, Random)</code> 보다 정적 팩터리 메서드인 <code class=\"language-text\">BigInteger.probablePrime</code> 쪽이 ‘값이 소수인 BigInteger를 반환한다’는 의미를 더 잘 들어낼 수 있다. 또 생성자는 하나의 시그니처로 하나의 생성자만 만들 수 있지만, 정적 팩터리 메서드는 이러한 제약이 없다.</p>\n<h3 id=\"2-인스턴스를-통제할-수-있다\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%ED%86%B5%EC%A0%9C%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"2 인스턴스를 통제할 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 인스턴스를 통제할 수 있다.</h3>\n<p>호출될 때마다 새로운 인스턴스를 생성하지 않아도 된다. 인스턴스를 미리 만들어 재활용하는 식으로 불필요한 객체 생성을 피할 수 있다. 대표적인 예로 <code class=\"language-text\">Boolean.valueOf(boolean)</code> 메서드가 있다. 특히 생성 비용이 큰 객체가 자주 요청되는 상황에 이 방식을 사용한다면 상당한 성능을 끌어올릴 수 있다.</p>\n<h3 id=\"3-반환-타입의-하위-타입-객체를-반환할-수-있다\" style=\"position:relative;\"><a href=\"#3-%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85%EC%9D%98-%ED%95%98%EC%9C%84-%ED%83%80%EC%9E%85-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"3 반환 타입의 하위 타입 객체를 반환할 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 반환 타입의 하위 타입 객체를 반환할 수 있다.</h3>\n<p>반환할 객체의 클래스를 자유롭게선택할 수 있는 유연성을 제공한다. 대표적인 예로 자바 컬렉션 프레임워크는 <code class=\"language-text\">java.util.Collections</code>에서 정적 팩터리 메서드를 통해 45개의 유틸리티 구현체를 제공한다. 이를 통해 API가 작아진 것은 물론 프로그래머가 API를 사용하기 위한 난이도도 낮추었다. 자바 8부터는 인터페이스가 정적 메서드를 가질 수 없다는 제한도 풀렸기 때문에 이를 활용할 수도 있다.</p>\n<h3 id=\"4-입력-매개변수에-따라-다른-클래스의-객체를-반환-할-수-있다\" style=\"position:relative;\"><a href=\"#4-%EC%9E%85%EB%A0%A5-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%97%90-%EB%94%B0%EB%9D%BC-%EB%8B%A4%EB%A5%B8-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%B0%98%ED%99%98-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"4 입력 매개변수에 따라 다른 클래스의 객체를 반환 할 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 입력 매개변수에 따라 다른 클래스의 객체를 반환 할 수 있다.</h3>\n<p>반환 타입의 하위 타입이기만 하면 어떤 클래스의 객체를 반환하든 상관없다. 예를 들어 <code class=\"language-text\">EnumSet</code> 클래스의 경우 원소가 64개 이하라면 <code class=\"language-text\">RegularEnumSet</code>을, 64개 이상이라면 <code class=\"language-text\">JumboEnumSet</code>을 반환하여 효율성을 높였다.</p>\n<h3 id=\"5-정적-팩터리를-작성하는-시점에는-반환할-객체의-클래스가-존재하지-않아도-된다\" style=\"position:relative;\"><a href=\"#5-%EC%A0%95%EC%A0%81-%ED%8C%A9%ED%84%B0%EB%A6%AC%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EC%8B%9C%EC%A0%90%EC%97%90%EB%8A%94-%EB%B0%98%ED%99%98%ED%95%A0-%EA%B0%9D%EC%B2%B4%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EB%90%9C%EB%8B%A4\" aria-label=\"5 정적 팩터리를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 정적 팩터리를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.</h3>\n<p>이러한 특성은 서비스 제공자 프레임워크(service provider framework)를 만드는 근간이 된다. 대표적으로 JDBC의 서비스 접근 API역할을 하는 <code class=\"language-text\">DriverManager.getConnection</code>이 정적 팩터리를 사용한 것이다.</p>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<h3 id=\"1-하위-클래스를-만들-수-없다\" style=\"position:relative;\"><a href=\"#1-%ED%95%98%EC%9C%84-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EB%A7%8C%EB%93%A4-%EC%88%98-%EC%97%86%EB%8B%A4\" aria-label=\"1 하위 클래스를 만들 수 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 하위 클래스를 만들 수 없다.</h3>\n<p>상속을 위해서는 public이나 protected 생성자가 필요하기 때문에 정적 팩터리 메서드만 제공한다면 하위 클래스를 만들 수 없다. 하지만 이 제약은 컴포지션 사용을 유도하고 불변 타입으로 만들기 위해서는 이 제약을 지켜야 하기 때문에 오히려 장점으로 작용할 수 있다.</p>\n<h3 id=\"2-프로그래머가-찾기-어렵다\" style=\"position:relative;\"><a href=\"#2-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EA%B0%80-%EC%B0%BE%EA%B8%B0-%EC%96%B4%EB%A0%B5%EB%8B%A4\" aria-label=\"2 프로그래머가 찾기 어렵다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 프로그래머가 찾기 어렵다.</h3>\n<p>생성자처럼 API 설명에 명확히 드러나지 않기 때문에 사용자는 정적 팩터리 메서드 방식의 클래스를 인스턴스화 할 방법을 알아야한다. 이 문제를 완화하기 위해 알려진 규약을 따라 메서드 이름을 짓는 것이 좋다.</p>\n<ul>\n<li>\n<p>from: 매개변수를 하나 받아 해당 타입의 인스턴스를 반환</p>\n<p><code class=\"language-text\">Date d = Date.from(instant);</code></p>\n</li>\n<li>\n<p>of: 여러 매개변수를 받아 적절한 타입의 인스턴스를 반환</p>\n<p><code class=\"language-text\">Set&lt;Rank> faceCards = EnumSet.of(JACK, QUEEN, KING);</code></p>\n</li>\n<li>\n<p>valueOf: from과 of의 자세한 버전</p>\n<p><code class=\"language-text\">BigInteger.valueOf(Integer.MAX_VALUE);</code></p>\n</li>\n<li>\n<p>instance or getInstance: 매개변수로 명시한 인스턴스를 반환하지만 같은 인스턴스임을 보장하지 않음</p>\n<p><code class=\"language-text\">StackWalker luke = StackWalker.getInstance(options);</code></p>\n</li>\n<li>\n<p>create or newInstance: instance, getInstance와 같지만 매번 새로운 인스턴스를 생성해 반환</p>\n<p><code class=\"language-text\">Object newArray = Array.newInstance(clasObject, arrayLen);</code></p>\n</li>\n<li>\n<p>getType: getInstance와 같지만 생성할 클래스가 아닌 다른 클래스의 팩터리 메서드로 정의할 때 사용한다. “Type”은 메서드가 반환할 객체의 타입이다.</p>\n<p><code class=\"language-text\">FileStore fs = Files.getFileStore(path);</code></p>\n</li>\n<li>\n<p>newType: newInstance와 같지만 생성할 클래스가 아닌 다른 클래스의 팩터리 메서드로 정의할 때 사용한다.. “Type”은 메서드가 반환할 객체의 타입이다.</p>\n<p><code class=\"language-text\">BufferedReader br = Files.newBufferedReader(path);</code></p>\n</li>\n<li>\n<p>type: getType과 newType의 간결한 버전</p>\n<p><code class=\"language-text\">List&lt;Complaint> litany = Collections.list(legacyLitany);</code></p>\n</li>\n</ul>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>정적 팩터리 메서드를 사용하는 것이 유리한 경우가 많으므로, 무작정 public 생성자를 제공하던 습관을 고치고 정적 팩터리 메서드의 사용을 고려하자.</p>","frontmatter":{"title":"ITEM 1. 생성자 대신 정적 팩터리 메서드를 고려하라","date":"October 10, 2021"}}},"pageContext":{"slug":"/effective-java/item-1-consider-static-factory-method/","previous":{"fields":{"slug":"/toby-spring/transaction-annotation/"},"frontmatter":{"title":"트랜잭션 어노테이션"}},"next":{"fields":{"slug":"/effective-java/item-2-consider-a-builder/"},"frontmatter":{"title":"ITEM 2. 생성자에 매개변수가 많다면 빌더를 고려하라"}}}},
    "staticQueryHashes": ["3078735561","3128451518"]}