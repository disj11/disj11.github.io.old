{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/effective-java/item-34-use-enums-instead-of-int-constants/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Dev Logs","author":"tykim","siteUrl":"https://disj11.github.io","comment":{"disqusShortName":"","utterances":"disj11/disj11.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"d384db8a-f0a4-54aa-99e0-b2bb8aa0bade","excerpt":"…","html":"<p>자바에서 열거 타입을 지원하기 전에는 아래와 같이 정수 상수를 선언해 사용했었다.</p>\n<h2 id=\"정수-열거-패턴\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%88%98-%EC%97%B4%EA%B1%B0-%ED%8C%A8%ED%84%B4\" aria-label=\"정수 열거 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정수 열거 패턴</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> APPLE_FUJI <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> APPLE_PIPPIN <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> APPLE_GRANNY_SMITH <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ORANGE_NAVEL <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ORANGE_TEMPLE <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ORANGE_BLOOD <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 같은 정수 열거 패턴은 단점이 많다.</p>\n<ol>\n<li>타입 안전을 보장할 방법이 없으며 표현력도 좋지 않다.</li>\n<li><code class=\"language-text\">APPLE_FUJI == ORANGE_NAVEL</code> 처럼 동등 연산자로 비교하더라도 <code class=\"language-text\">true</code> 값이 나온다.</li>\n<li>문자열로 출력하기가 어렵기 때문에 디버깅이 어렵다.</li>\n<li>열거 그룹 안에 있는 모든 상수를 순회할 방법도 없으며, 총 몇 개의 상수가 정의되어 있는지 알 수도 없다.</li>\n</ol>\n<p>정수 대신 문자열을 사용하는 패턴도 있지만, 이 패턴도 단점이 많다.</p>\n<ol>\n<li>문자열 상수 대신 문자열 값을 그대로 사용하는 실수를 할 수 있다.</li>\n<li>문자열 값에 오타가 있다고 해도 컴파일러는 확인할 길이 없어 런타임 시 버그가 발생할 수 있다.</li>\n</ol>\n<p>이러한 단점을 해결할 수 있는 것이 열거 타입이다.</p>\n<h2 id=\"열거-타입\" style=\"position:relative;\"><a href=\"#%EC%97%B4%EA%B1%B0-%ED%83%80%EC%9E%85\" aria-label=\"열거 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>열거 타입</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Apple</span> <span class=\"token punctuation\">{</span> FUJI<span class=\"token punctuation\">,</span> PIPPIN<span class=\"token punctuation\">,</span> GRANNY_SMITH <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Orange</span> <span class=\"token punctuation\">{</span> NAVEL<span class=\"token punctuation\">,</span> TEMPLE<span class=\"token punctuation\">,</span> BLOOD <span class=\"token punctuation\">}</span></code></pre></div>\n<p>열거 타입은 외부에서 접근할 수 있는 생성자를 제공하지 않으므로 사실상 final이며, 인스턴스 역시 단 하나만 존재함이 보장된다. 열거 타입의 장점은 다음과 같다.</p>\n<ol>\n<li>컴파일타임 타입 안전성을 제공한다.</li>\n<li>열거 타입의 <code class=\"language-text\">toString</code> 메서드는 적절한 문자열을 보여준다.</li>\n<li>자신 안에 정의된 상수 값을 배열로 반환해주는 정적 메서드인 <code class=\"language-text\">values()</code> 를 제공한다.</li>\n</ol>\n<p>보는 것과 같이 열거 타입은 정수 열거 패턴의 단점을 해소해준다. 추가적으로 열거 타입에는 임의의 메서드나 필드를 추가할 수도 있다. 예를 들어, 과일의 색을 알려주는 메서드, 과일의 이미지를 반환하는 메서드 등을 추가할 수 있을 것이다. 한걸음 더 나아가, 상수마다 동작이 달라져야 하는 경우도 열거 타입을 통해 제공할 수 있다.</p>\n<h2 id=\"예제---사칙-연산-계산기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C---%EC%82%AC%EC%B9%99-%EC%97%B0%EC%82%B0-%EA%B3%84%EC%82%B0%EA%B8%B0\" aria-label=\"예제   사칙 연산 계산기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 - 사칙 연산 계산기</h2>\n<p>사칙연산을 제공하는 계산기를 만들어보고, 이를 개선해보자.</p>\n<h3 id=\"개선전-switch문-사용\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%84%A0%EC%A0%84-switch%EB%AC%B8-%EC%82%AC%EC%9A%A9\" aria-label=\"개선전 switch문 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개선전 (switch문 사용)</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n\tPLUS<span class=\"token punctuation\">,</span> MINUS<span class=\"token punctuation\">,</span> TIMES<span class=\"token punctuation\">,</span> DIVIDE<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> PLUS<span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> MINUS<span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> TIMES<span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> DIVIDE<span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"알 수 없는 연산: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 동작은 하겠지만 좋지만은 않은 코드이다. <code class=\"language-text\">throw</code> 문은 실제로 도달할 일이 없지만 기술적은로는 도달할 수 있기 때문에 생략하면 컴파일조차 되지 않는다. 또 새로운 연산자가 추가될 경우 해당 case문도 추가해야 한다. 혹시라도 잊게 된다면 런타임 시 <code class=\"language-text\">AssertionError</code> 가 발생할 것이다.</p>\n<h3 id=\"개선-후-상수별-메서드-구현\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%84%A0-%ED%9B%84-%EC%83%81%EC%88%98%EB%B3%84-%EB%A9%94%EC%84%9C%EB%93%9C-%EA%B5%AC%ED%98%84\" aria-label=\"개선 후 상수별 메서드 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개선 후 (상수별 메서드 구현)</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Operation</span> <span class=\"token punctuation\">{</span>\n\tPLUS <span class=\"token punctuation\">{</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\tMINUS <span class=\"token punctuation\">{</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x <span class=\"token operator\">-</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\tTIMES <span class=\"token punctuation\">{</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\tDIVIDE <span class=\"token punctuation\">{</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">double</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이처럼 변경된 코드는 새로운 연산자가 추가되더라도 apply 메서드 작성을 잊을 가능성을 낮춰준다. 실수로 잊었다 하더라도 컴파일 오류가 발생하여 메서드 작성을 잊었다고 알려줄 것이다.</p>\n<h2 id=\"예제---일당-계산기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C---%EC%9D%BC%EB%8B%B9-%EA%B3%84%EC%82%B0%EA%B8%B0\" aria-label=\"예제   일당 계산기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 - 일당 계산기</h2>\n<p>직원의 기본 임금과 일한 시간을 받아 일당을 계산해주는 계산기를 만들고 개선해보자. 추가적인 조건으로 주중에 오버타임이 발생하면 잔업수당이 주어지고, 주말에는 무조건 잔업수당이 주어진다고 하자. 이를 열거 타입으로 만들면 아래와 같다.</p>\n<h3 id=\"개선-전-switch문-사용\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%84%A0-%EC%A0%84-switch%EB%AC%B8-%EC%82%AC%EC%9A%A9\" aria-label=\"개선 전 switch문 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개선 전 (switch문 사용)</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">PayrollDay</span> <span class=\"token punctuation\">{</span>\n\tMONDAY<span class=\"token punctuation\">,</span> TUESDAY<span class=\"token punctuation\">,</span> WEDNESDAY<span class=\"token punctuation\">,</span> THURSDAY<span class=\"token punctuation\">,</span> FRIDAY<span class=\"token punctuation\">,</span> SATURDAY<span class=\"token punctuation\">,</span> SUNDAY<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MINS_PER_SHIFT <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minutesWorked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> basePay <span class=\"token operator\">=</span> minutesWorked <span class=\"token operator\">*</span> payRate<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> overtimePay<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> SATURDAY<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">case</span> SUNDAY<span class=\"token operator\">:</span>\n\t\t\t\tovertimePay <span class=\"token operator\">=</span> basePay <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\tovertimePay <span class=\"token operator\">=</span> minutesWorked <span class=\"token operator\">&lt;=</span> MINS_PER_SHIFT <span class=\"token operator\">?</span>\n\t\t\t\t\t<span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>minutesWorked <span class=\"token operator\">-</span> MINS_PER_SHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> payRate <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> basePay <span class=\"token operator\">+</span> overtimePay<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 코드는 간결하지만, 관리 관점에서는 위험하다. 휴가와 같은 새로운 값을 열거 타입에 추가할 경우 그 값을 처리하는 case문을 잊지 않고 넣어줘야한다. 그렇지 않으면 휴가 기간에 일해도 평일과 같은 임금을 받게 된다. 이를 개선해보자.</p>\n<h3 id=\"개선-후-전략-열거-타입-패턴\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%84%A0-%ED%9B%84-%EC%A0%84%EB%9E%B5-%EC%97%B4%EA%B1%B0-%ED%83%80%EC%9E%85-%ED%8C%A8%ED%84%B4\" aria-label=\"개선 후 전략 열거 타입 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개선 후 (전략 열거 타입 패턴)</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">PayrollDay</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">MONDAY</span><span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">TUESDAY</span><span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WEDNESDAY</span><span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">THURSDAY</span><span class=\"token punctuation\">(</span>WEEKKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">FRIDAY</span><span class=\"token punctuation\">(</span>WEEKDAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SATURDAY</span><span class=\"token punctuation\">(</span>WEEKEND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SUNDAY</span><span class=\"token punctuation\">(</span>WEEKEND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PayType</span> payType<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">PayrollDay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PayType</span> payType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>payType <span class=\"token operator\">=</span> payType<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minutesWorked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> payType<span class=\"token punctuation\">.</span><span class=\"token function\">pay</span><span class=\"token punctuation\">(</span>minutesWorked<span class=\"token punctuation\">,</span> payRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 전략 열거 타입</span>\n\t<span class=\"token keyword\">enum</span> <span class=\"token class-name\">PayType</span> <span class=\"token punctuation\">{</span>\n\t\tWEEKDAY <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">overtimePay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minsworked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> minsWorked <span class=\"token operator\">&lt;=</span> MINS_PER_SHIFT <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>minsWorked <span class=\"token operator\">-</span> MINS_PER_SHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> payRate <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tWEEKEND <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">overtimePay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minsworked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> minsWorked <span class=\"token operator\">*</span> payRate <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">overtimePay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mins<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MINS_PER_SHIFT <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minsWorked<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> payRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> basePay <span class=\"token operator\">=</span> minsWorked <span class=\"token operator\">*</span> payRate<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> basePay <span class=\"token operator\">+</span> <span class=\"token function\">overtimePay</span><span class=\"token punctuation\">(</span>minsWorked<span class=\"token punctuation\">,</span> payRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>개선된 코드에서는 새로운 상수를 추가할 때 잔업수당 ‘전략’을 선택하도록 하였다. 이 패턴을 사용하면 switch 문이나 상수별 메서드 구현이 필요 없게 된다. switch 문을 사용한 것보다 복잡하지만 더 안전하고 유연하다.</p>\n<p>하지만 추가하려는 메서드가 의미상 열거 타입과 연관이 없거나, 기존 열거 타입에 상수별 동작을 혼합해 넣을 때는 switch 문이 좋은 선택이 될 수 있다. 예를 들어 서드파티에서 가져온 Operation 열거타입이 있다고 가정하고, 각 연산의 반대 연산을 변환하는 메서드가 필요하다면 다음과 같이 작성 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Operation <span class=\"token function\">inverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Operation op</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token constant\">PLUS</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> Operation<span class=\"token punctuation\">.</span><span class=\"token constant\">MINUS</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token constant\">MINUS</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> Operation<span class=\"token punctuation\">.</span><span class=\"token constant\">PLUS</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token constant\">TIMES</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> Opertaion<span class=\"token punctuation\">.</span><span class=\"token constant\">DIVIDE</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token constant\">DEVIDE</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> Operation<span class=\"token punctuation\">.</span><span class=\"token constant\">TIMES</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"알 수 없는 연산: \"</span> <span class=\"token operator\">+</span> op<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>열거 타입에 포함할만큼 유용하지는 않은 경우도 마찬가지로 switch를 활용할 수 있다.</p>\n<h2 id=\"팁\" style=\"position:relative;\"><a href=\"#%ED%8C%81\" aria-label=\"팁 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팁</h2>\n<p>열거 타입에서 <code class=\"language-text\">toString</code> 메서드를 재정의하였다면, <code class=\"language-text\">toString</code> 이 반환하는 문자열을 열거 타입 상수로 변환해주는 <code class=\"language-text\">fromString</code> 메서드를 제공할 것을 고려해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Operation</span><span class=\"token punctuation\">></span></span> stringToEnum <span class=\"token operator\">=</span>\n\t<span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token operator\">::</span><span class=\"token function\">toString</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Operation</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> symbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>stringToEnum<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>필요한 원소를 컴파일타임에 다 알 수 있는 상수 집합이라면 항상 열거 타입을 사용하자. 열거 타입은 나중에 상수가 추가돼도 바이너리 수준에서 호환되도록 설계되었다. 하나의 메서드가 상수별로 다르게 동작해야한다면 switch 문 대신 상수별 메서드 구현을 사용하자. 열거 타임 상수 일부가 같은 동작을 공유한다면 전략 열거 타입 패턴을 사용하자.</p>","frontmatter":{"title":"int 상수 대신 열거 타입을 사용하라","date":"October 25, 2021"}}},"pageContext":{"slug":"/effective-java/item-34-use-enums-instead-of-int-constants/","previous":{"fields":{"slug":"/development/rfc6749-oauth2/"},"frontmatter":{"title":"OAuth에 대하여 알아보자."}},"next":{"fields":{"slug":"/git/conventional-commits/"},"frontmatter":{"title":"Conventional Commit (커밋 규칙)"}}}},
    "staticQueryHashes": ["3078735561","3128451518"]}