{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/java/immutable-object-and-referential-transparency/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Dev Logs","author":"tykim","siteUrl":"https://disj11.github.io","comment":{"disqusShortName":"","utterances":"disj11/disj11.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a0d8eae8-bfd6-5402-b7ad-7aa70e4a9211","excerpt":"개요 불변 객체와 참조 투명성에 대하여 알아보고, 예제를 통하여 불변 객체가 갖는 장점을 알아보자. 참조 투명성 (Referential transparency) ‘참조 투명성’은 함수가 함수 외부의 영향을 받지 않는 것을 의미한다. 이렇게 외부의 영향을 받지 않는 코드를 가리켜 “참조에 투명 하다.” 라고 할 수 있다. 불변 객체 (Immutable object…","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>불변 객체와 참조 투명성에 대하여 알아보고, 예제를 통하여 불변 객체가 갖는 장점을 알아보자.</p>\n<h2 id=\"참조-투명성-referential-transparency\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0-%ED%88%AC%EB%AA%85%EC%84%B1-referential-transparency\" aria-label=\"참조 투명성 referential transparency permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조 투명성 (Referential transparency)</h2>\n<p>‘참조 투명성’은 함수가 함수 외부의 영향을 받지 않는 것을 의미한다. 이렇게 외부의 영향을 받지 않는 코드를 가리켜 “참조에 투명 하다.” 라고 할 수 있다.</p>\n<h2 id=\"불변-객체-immutable-object\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4-immutable-object\" aria-label=\"불변 객체 immutable object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불변 객체 (Immutable object)</h2>\n<p>객체 지향 프로그램에서 말하는 ‘불변 객체’란 생성 후 상태를 바꿀 수 없는 객체를 말한다. 불변 객체는 참조에 투명하므로 스레드에 안전한 특징을 갖는다. 반대의 개념으로는 가변(mutable) 객체가 있으며, 가변 객체는 생성 후에도 상태를 변경할 수 있다.</p>\n<h2 id=\"예제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h2>\n<p>예제를 통해 불변 객체가 같는 장점을 살펴보자.</p>\n<h3 id=\"가변-객체-사용\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B3%80-%EA%B0%9D%EC%B2%B4-%EC%82%AC%EC%9A%A9\" aria-label=\"가변 객체 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가변 객체 사용</h3>\n<p>먼저 다음과 같은 <code class=\"language-text\">Money</code> 클래스가 존재한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Money</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 코드는 <code class=\"language-text\">setValue</code> 라는 상태를 변경할 수 있는 세터가 존재하므로 가변 객체이다. 가변 객체는 불변 객체와 다르게 참조 투명성 문제가 발생할 수 있다. 문제가 발생하는 상황을 살펴보자. 먼저 다음과 같은 주문 항목을 표현하는 클래스가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderLine</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Money</span> price<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">=</span> quantity<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amounts <span class=\"token operator\">=</span> price<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> quantity<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 코드를 사용하는 클라이언트에서 다음과 같은 코드를 작성하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Money</span> price <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">OrderLine</span> line <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderLine</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1]</span>\nprice<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2]</span>\n\n<span class=\"token comment\">// [1]: [price=1000, quantity=2, amounts=2000]</span>\n<span class=\"token comment\">// [2]: [price=2000, quantity=2, amounts=2000]</span></code></pre></div>\n<p>[1] 에서 <code class=\"language-text\">OrderLine</code> 을 생성하면 amounts 에는 2000 이라는 값이 들어갈 것이다. 아직까지는 문제가 보이지 않는다. 하지만 [2]에서 <code class=\"language-text\">Money</code> 의 값을 2000으로 수정하였다. 다시 한번 <code class=\"language-text\">OrderLine</code> 을 확인해보니 price=2000, quantity=2 인데 amounts 가 2000으로 문제가 발생한다. 이 문제를 고치기 위해서는 다음과 같은 코드가 필요하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderLine</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Money</span> price<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> quantity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quantity <span class=\"token operator\">=</span> quantity<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amounts <span class=\"token operator\">=</span> price<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> quantity<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>생성자에서 <code class=\"language-text\">Money</code> 객체를 새로 생성하여 방어적인 코드를 작성하여 문제를 해결하였다. 물론 이런 식으로 해결 할 수도 있겠지만, 만약 <code class=\"language-text\">Money</code> 객체가 불변 객체였다면 어땠을까?</p>\n<h3 id=\"불변-객체\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80-%EA%B0%9D%EC%B2%B4\" aria-label=\"불변 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불변 객체</h3>\n<p><code class=\"language-text\">Money</code> 객체를 불변 객체로 바꿔보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Money</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Money</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Money</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> money<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>setter 가 없어지고 대신 <code class=\"language-text\">add</code> 메서드가 추가되었다. <code class=\"language-text\">add</code> 메서드는 객체의 상태를 바꾸는 것이 아닌 새로운 객체를 생성하여 되돌려준다. 이제 <code class=\"language-text\">Money</code> 는 불변 객체가 되었으며, 상태를 바꿀 수 없으므로 참조 투명성 문제도 발생하지 않는다. 또, 단순히 “값을 설정한다” 라는 개념이 아닌 “돈을 더한다” 라는 개념이 더 명확하게 들어나게 되었다.</p>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>불변 객체와 가변 객체의 예제를 만들어보며, 불변 객체가 갖는 장점을 알아보았다. 이펙티브 자바의 <a href=\"/effective-java/item-17-minimize-mutability\">ITEM 17</a>에서도 불변 객체의 장점을 설명하고 있다. 앞으로는 기계적으로 getter와 setter를 작성하지 말고, 필요하다면 불변 객체를 만들어 사용해보자.</p>","frontmatter":{"title":"불변 객체와 참조 투명성","date":"October 14, 2021"}}},"pageContext":{"slug":"/java/immutable-object-and-referential-transparency/","previous":{"fields":{"slug":"/effective-java/item-6-avoid-creating-unnecessary-objects/"},"frontmatter":{"title":"ITEM 6. 불필요한 객체 생성을 피하라."}},"next":{"fields":{"slug":"/effective-java/item-17-minimize-mutability/"},"frontmatter":{"title":"ITEM 17. 변경 가능성을 최소화하라"}}}},
    "staticQueryHashes": ["3078735561","3128451518"]}