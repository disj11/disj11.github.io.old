{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/kotlin/basic-syntax/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Dev Logs","author":"tykim","siteUrl":"https://disj11.github.io","comment":{"disqusShortName":"","utterances":"disj11/disj11.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"3401e907-71be-5691-bbb1-90da7c2cba9d","excerpt":"개요 예제를 통하여 코틀린의 기본 문법을 알아보자. 패키지 정의 및 가져오기 패키지는 소스 파일의 최상단에 선언하여야 한다. 디렉토리와 패키지는 일치시키지 않아도 상관없다. Packages 참조 프로그램 시작점 코틀린 어플리케이션의 시작점은  함수이다.  함수는  매개변수를 받을 수 있다. 표준 출력  는 입력 받은 매개변수를 표준 출력한다. 는 입력 받은 매개변수를 표준 출력하고 줄 바꿈을 추가한다. Functions…","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>예제를 통하여 코틀린의 <a href=\"https://kotlinlang.org/docs/basic-syntax.html\">기본 문법</a>을 알아보자.</p>\n<h2 id=\"패키지-정의-및-가져오기\" style=\"position:relative;\"><a href=\"#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%A0%95%EC%9D%98-%EB%B0%8F-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" aria-label=\"패키지 정의 및 가져오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패키지 정의 및 가져오기</h2>\n<p>패키지는 소스 파일의 최상단에 선언하여야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> my<span class=\"token punctuation\">.</span>demo\n\n<span class=\"token keyword\">import</span> kotlin<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>디렉토리와 패키지는 일치시키지 않아도 상관없다.</p>\n<p><a href=\"https://kotlinlang.org/docs/packages.html\">Packages</a> 참조</p>\n<h2 id=\"프로그램-시작점\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%8B%9C%EC%9E%91%EC%A0%90\" aria-label=\"프로그램 시작점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그램 시작점</h2>\n<p>코틀린 어플리케이션의 시작점은 <code class=\"language-text\">main</code> 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">main</code> 함수는 <code class=\"language-text\">String</code> 매개변수를 받을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">contentToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"표준-출력\" style=\"position:relative;\"><a href=\"#%ED%91%9C%EC%A4%80-%EC%B6%9C%EB%A0%A5\" aria-label=\"표준 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표준 출력</h2>\n<p><code class=\"language-text\">print</code> 는 입력 받은 매개변수를 표준 출력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello \"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// output\nHello world!</code></pre></div>\n<p><code class=\"language-text\">println</code>는 입력 받은 매개변수를 표준 출력하고 줄 바꿈을 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// output\nHello\nworld!</code></pre></div>\n<h2 id=\"functions\" style=\"position:relative;\"><a href=\"#functions\" aria-label=\"functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions</h2>\n<p>두 개의 <code class=\"language-text\">Int</code> 파라미터와 <code class=\"language-text\">Int</code> 리턴 타입을 같는 함수:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수의 본문은 표현식을 사용하여 작성할 수 있다. 리턴 타입은 타입 추론된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b</code></pre></div>\n<p>값을 반환하지 않는 함수:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">printSum</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Unit <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum of <span class=\"token interpolation variable\">$a</span> and <span class=\"token interpolation variable\">$b</span> is <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>a <span class=\"token operator\">+</span> b<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Unit</code> 리턴 타입은 생략할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">printSum</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sum of <span class=\"token interpolation variable\">$a</span> and <span class=\"token interpolation variable\">$b</span> is <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>a <span class=\"token operator\">+</span> b<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://kotlinlang.org/docs/functions.html\">Functions</a> 참조</p>\n<h2 id=\"변수\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98\" aria-label=\"변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수</h2>\n<p>읽기 전용 지역변수는 <code class=\"language-text\">val</code> 키워드를 사용하여 정의하며, 값의 할당은 한번만 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> a<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 선언 시 초기값 할당</span>\n<span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// `Int` 타입이 추론 됨</span>\n<span class=\"token keyword\">val</span> c<span class=\"token operator\">:</span> Int <span class=\"token comment\">// 선언 시 초기값을 할당하지 않는 경우는 `Type`을 명시해야 함</span>\nc <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token comment\">// 지연된 할당</span></code></pre></div>\n<p>값을 재할당 하고 싶다면 <code class=\"language-text\">var</code> 키워드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\">// `Int` 타입이 추론 됨</span>\nx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>상위 레벨에서 변수 선언이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">incrementX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://kotlinlang.org/docs/properties.html\">Properties</a> 참조</p>\n<h2 id=\"클래스와-인스턴스의-생성\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%9D%98-%EC%83%9D%EC%84%B1\" aria-label=\"클래스와 인스턴스의 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스와 인스턴스의 생성</h2>\n<p>클래스의 정의에는 <code class=\"language-text\">class</code> 키워드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Shape</code></pre></div>\n<p>클래스의 속성은 클래스 선언부나 본문에 나열할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> height<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> length<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> perimeter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>클래스 선언부에 나열되어 있는 속성이 있다면, 기본 생성자로 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> rectangle <span class=\"token operator\">=</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The perimeter is <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>rectangle<span class=\"token punctuation\">.</span>perimeter<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>클래스의 상속은 <code class=\"language-text\">:</code> 를 사용한다. 클래스는 기본적으로 상속 불가능한 <code class=\"language-text\">final</code> 이므로 상속 가능하게 만들기 위해서는 <code class=\"language-text\">open</code> 을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> Shape\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> height<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> length<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">Shape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> perimeter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">+</span> length<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://kotlinlang.org/docs/classes.html\">classes</a> 와 <a href=\"https://kotlinlang.org/docs/object-declarations.html\">objects and instances</a> 참조</p>\n<h2 id=\"주석\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%84%9D\" aria-label=\"주석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주석</h2>\n<p>코틀린은 한 줄 주석과 여러 줄 주석이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 한 줄 주석 사용</span>\n\n<span class=\"token comment\">/* 여러 줄 주석 사용\n   여러 줄 주석 사용 */</span></code></pre></div>\n<p>여러 줄 주석은 중첩하여 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/* 여러 줄 주석 시작\n/* 중첩 된 주석 *⁠/\n여러 줄 주석 끝 */</span></code></pre></div>\n<p>문서화를 위한 주석 구문은 <a href=\"https://kotlinlang.org/docs/kotlin-doc.html\">Documenting Kotlin Code</a> 참조</p>\n<h2 id=\"문자열-템플릿\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%85%9C%ED%94%8C%EB%A6%BF\" aria-label=\"문자열 템플릿 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 템플릿</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token comment\">// simple name in template:</span>\n<span class=\"token keyword\">val</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"a is <span class=\"token interpolation variable\">$a</span>\"</span> \n\na <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// arbitrary expression in template:</span>\n<span class=\"token keyword\">val</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"${s1.replace(\"</span><span class=\"token keyword\">is</span><span class=\"token string\">\", \"</span>was<span class=\"token string\">\")}, but now is <span class=\"token interpolation variable\">$a</span>\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// output\na was 1, but now is 2</code></pre></div>\n<p>자세한 내용은 <a href=\"https://kotlinlang.org/docs/basic-types.html#string-templates\">String templates</a> 참조</p>\n<h2 id=\"조건식\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B1%B4%EC%8B%9D\" aria-label=\"조건식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건식</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">maxOf</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> a\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> b\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>코틀린에서는 <code class=\"language-text\">if</code> 를 표현식으로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">maxOf</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> a <span class=\"token keyword\">else</span> b</code></pre></div>\n<p><a href=\"https://kotlinlang.org/docs/control-flow.html#if-expression\"><code class=\"language-text\">if</code> -expressions</a> 참조</p>\n<h2 id=\"for-loop\" style=\"position:relative;\"><a href=\"#for-loop\" aria-label=\"for loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for loop</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> items <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kiwifruit\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또는</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> items <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kiwifruit\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item at <span class=\"token interpolation variable\">$index</span> is <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>items<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://kotlinlang.org/docs/control-flow.html#for-loops\">for loop</a> 참조</p>\n<h2 id=\"while-loop\" style=\"position:relative;\"><a href=\"#while-loop\" aria-label=\"while loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>while loop</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> items <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kiwifruit\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item at <span class=\"token interpolation variable\">$index</span> is <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>items<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n    index<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://kotlinlang.org/docs/control-flow.html#while-loops\">while loop</a> 참조</p>\n<h2 id=\"when-expression\" style=\"position:relative;\"><a href=\"#when-expression\" aria-label=\"when expression permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>when expression</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">describe</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">1</span>          <span class=\"token operator\">-></span> <span class=\"token string\">\"One\"</span>\n        <span class=\"token string\">\"Hello\"</span>    <span class=\"token operator\">-></span> <span class=\"token string\">\"Greeting\"</span>\n        <span class=\"token keyword\">is</span> Long    <span class=\"token operator\">-></span> <span class=\"token string\">\"Long\"</span>\n        <span class=\"token operator\">!</span><span class=\"token keyword\">is</span> String <span class=\"token operator\">-></span> <span class=\"token string\">\"Not a string\"</span>\n        <span class=\"token keyword\">else</span>       <span class=\"token operator\">-></span> <span class=\"token string\">\"Unknown\"</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://kotlinlang.org/docs/control-flow.html#when-expression\">when expression</a> 참조</p>\n<h2 id=\"range\" style=\"position:relative;\"><a href=\"#range\" aria-label=\"range permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Range</h2>\n<p><code class=\"language-text\">in</code> 연산자를 사용하여 숫자가 범위 내에 있는지 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">val</span> y <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">prinln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fits in range\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>숫자가 범위를 벗어났는지 확인:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">!</span><span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token operator\">..</span>list<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-1 is out of range\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>size <span class=\"token operator\">!</span><span class=\"token keyword\">in</span> list<span class=\"token punctuation\">.</span>indices<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list size is out of valid list indices range, too\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>범위를 반복:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">step</code> 을 사용하여 증가 값을 변경:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">10</span> step <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// output\n1\n3\n5\n7\n9</code></pre></div>\n<p><a href=\"https://kotlinlang.org/docs/ranges.html\">Ranges and progressions</a> 참조</p>\n<h2 id=\"collections\" style=\"position:relative;\"><a href=\"#collections\" aria-label=\"collections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collections</h2>\n<p>컬렉션을 반복한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>컬렉션 안에 객체가 포함되어 있는지 확인하려면 <code class=\"language-text\">in</code> 을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">when</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"orange\"</span> <span class=\"token keyword\">in</span> items <span class=\"token operator\">-></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"juicy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"apple\"</span> <span class=\"token keyword\">in</span> items <span class=\"token operator\">-></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple is find too\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>람다식을 사용하여 컬렉션 <code class=\"language-text\">filter</code> 와 <code class=\"language-text\">map</code> 사용:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> fruits <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"avocado\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kiwifruit\"</span><span class=\"token punctuation\">)</span>\nfruits\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sortedBy</span> <span class=\"token punctuation\">{</span> it <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">uppercase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// output\nAPPLE\nAVOCADO</code></pre></div>\n<p><a href=\"https://kotlinlang.org/docs/collections-overview.html\">Collections overview</a> 참조</p>\n<h2 id=\"null-허용-값과-null-체크\" style=\"position:relative;\"><a href=\"#null-%ED%97%88%EC%9A%A9-%EA%B0%92%EA%B3%BC-null-%EC%B2%B4%ED%81%AC\" aria-label=\"null 허용 값과 null 체크 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null 허용 값과 null 체크</h2>\n<p><code class=\"language-text\">null</code> 값이 허용된다면 명시적으로 이름 뒤에 <code class=\"language-text\">?</code> 를 붙여야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>리턴 값으로 <code class=\"language-text\">null</code> 을 허용 함수의 사용:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">printProduct</span><span class=\"token punctuation\">(</span>arg1<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> arg2<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> x <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> y <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>arg2<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// `x * y`를 사용하면 null 값이 포함되어 있을수도 있으므로 오류가 발생한다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// null 체크 이후에는 자동으로 non-nullable로 캐스팅되어 사용 가능하다.</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'<span class=\"token interpolation variable\">$arg1</span>' or '<span class=\"token interpolation variable\">$arg2</span>' is not a number\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>    \n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>또는</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong number format in arg1: '<span class=\"token interpolation variable\">$arg1</span>'\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong number format in arg2: '<span class=\"token interpolation variable\">$arg2</span>'\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// null 체크 이후에는 자동으로 non-nullable로 캐스팅되어 사용 가능하다.</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://kotlinlang.org/docs/null-safety.html\">Null-safety</a> 참조</p>\n<h2 id=\"타입-검사와-자동-캐스팅\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EA%B2%80%EC%82%AC%EC%99%80-%EC%9E%90%EB%8F%99-%EC%BA%90%EC%8A%A4%ED%8C%85\" aria-label=\"타입 검사와 자동 캐스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 검사와 자동 캐스팅</h2>\n<p><code class=\"language-text\">is</code> 연산자는 타입을 확인하는데 사용한다. 불변인 로컬 변수 또는 속성이 타입이 특정 타입이 맞다고 확인된 경우, 명시적으로 캐스팅 할 필요가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">is</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// `obj`는 `String` 타입으로 자동 캐스팅 된다.</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>length\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또는</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">!</span><span class=\"token keyword\">is</span> String<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n\n    <span class=\"token comment\">// `obj`는 `String` 타입으로 자동 캐스팅 된다.</span>\n    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또는</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">getStringLength</span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// `obj`는 `&amp;&amp;` 우측에서 `String` 타입으로 자동 캐스팅 된다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">is</span> String <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>length\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://kotlinlang.org/docs/classes.html\">Classes</a> 와 <a href=\"https://kotlinlang.org/docs/typecasts.html\">Type casts</a> 참조</p>","frontmatter":{"title":"코틀린 기본 문법","date":"October 29, 2021"}}},"pageContext":{"slug":"/kotlin/basic-syntax/","previous":{"fields":{"slug":"/git/conventional-commits/"},"frontmatter":{"title":"Conventional Commit (커밋 규칙)"}},"next":{"fields":{"slug":"/kotlin/basic-idioms/"},"frontmatter":{"title":"코틀린 관용구 (Idioms)"}}}},
    "staticQueryHashes": ["3078735561","3128451518"]}