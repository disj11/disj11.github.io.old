{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/data-structure/inverted-index/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Dev Logs","author":"tykim","siteUrl":"https://disj11.github.io","comment":{"disqusShortName":"","utterances":"disj11/disj11.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"507090bc-7545-5e68-bf34-d8b120f572f7","excerpt":"개요 Inverted index(역방향 인덱스)는 대용량 텍스트 검색을 위해서 고안된 방법이다. 요즘 많이 사용하는 해시태그 기능을 구현하고 싶다면 역방향 인덱스 방법을 사용할 수 있으며, 대부분의 검색 엔진이 이 방식을\n사용한다. 기존의 검색 방식 WHERE =  검색어와 정확히 일치하는 문서만 검색된다. 인덱스가 걸려있을 경우 속도는 빠를 수 있지만, 문서 결과를 거의 얻지 못한다. WHERE LIKE  검색어가 포함되는 문서를 검색한다. 1번 보다 검색 결과가 많이 나올 순 있지만,…","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>Inverted index(역방향 인덱스)는 대용량 텍스트 검색을 위해서 고안된 방법이다. 요즘 많이 사용하는 해시태그 기능을 구현하고 싶다면 역방향 인덱스 방법을 사용할 수 있으며, 대부분의 검색 엔진이 이 방식을\n사용한다.</p>\n<h2 id=\"기존의-검색-방식\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4%EC%9D%98-%EA%B2%80%EC%83%89-%EB%B0%A9%EC%8B%9D\" aria-label=\"기존의 검색 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존의 검색 방식</h2>\n<ol>\n<li>\n<p>WHERE =<br>\n<code class=\"language-text\">SELECT * FROM DOCUMENT WHERE content = 'search text'</code><br>\n검색어와 정확히 일치하는 문서만 검색된다. 인덱스가 걸려있을 경우 속도는 빠를 수 있지만, 문서 결과를 거의 얻지 못한다.</p>\n</li>\n<li>\n<p>WHERE LIKE<br>\n<code class=\"language-select * from document where content like '\">search text</code><br>\n검색어가 포함되는 문서를 검색한다. 1번 보다 검색 결과가 많이 나올 순 있지만, 1번과 마찬가지로 검색어와 정확히 일치하는 문장이 포함되어야 한다.</p>\n</li>\n<li>\n<p>Whitespace tokenizer AND<br>\n<code class=\"language-select * from document where content like '\">search</code>\n검색어의 모든 단어가 포함되는 문서를 검색한다. 2번 방식보다는 향상된 결과를 보여준다.</p>\n</li>\n<li>\n<p>Whitespace tokenizer OR<br>\n<code class=\"language-select * from document where content like '\">search</code><br>\n검색어의 단어 중 하나의 단어라도 포함되어 있는 문서를 검색한다. 1~3번의 방식 중 가장 많은 결과가 검색되지만, 하나의 단어라도 포함되어 있는 문서는 전부 검색되기 때문에 검색 결과의 정확성이 떨어질 수\n있다.</p>\n</li>\n</ol>\n<h2 id=\"기존-방식의-문제\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EB%AC%B8%EC%A0%9C\" aria-label=\"기존 방식의 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 방식의 문제</h2>\n<ol>\n<li>1번과 같은 검색 방식의 경우 검색 결과를 거의 얻지 못함</li>\n<li>2~3번과 같은 경우 index를 타지 않기 때문어 검색 속도가 느림\n(like 검색시 %를 앞에 넣게되는 경우 인덱스를 타지 않는다.)</li>\n</ol>\n<h2 id=\"inverted-index\" style=\"position:relative;\"><a href=\"#inverted-index\" aria-label=\"inverted index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inverted index</h2>\n<blockquote>\n<p>위에서와 같이 기존 검색 방식은 INDEX 기능을 이용할 수 없다는 단점이 있다. 이를 극복하기 위해 단어(Term)로 인덱싱을 하는 Inverted index 방식이 고안되었다.</p>\n</blockquote>\n<p>Inverted index는 아래의 표를 통해 쉽게 이해할 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">term</th>\n<th align=\"left\">document_id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">안녕</td>\n<td align=\"left\">1,2,3</td>\n</tr>\n<tr>\n<td align=\"left\">붕어빵</td>\n<td align=\"left\">1,2</td>\n</tr>\n<tr>\n<td align=\"left\">고기</td>\n<td align=\"left\">1</td>\n</tr>\n</tbody>\n</table>\n<p>위의 표와 같이 역색인은 키워드에 문서의 Pk와 같은 값을 매핑하여 저장하는 기술이다. 역색인 작업을 했을 때의 장점은 검색 속도가 굉장히 빨라진다는 것이다. (term에 인덱스를 사용)</p>\n<p>“안녕 붕어빵”으로 검색 하였을 시 OR 처리를 하였다고 가정한다면, 1, 2, 3번 문서가 검색된다. 여기서 좀 더 발전시켜 문서별 단어 등장 빈도수를 계산하여, 빈도가 높은 순으로 정렬 하는 등 세부적인 처리를\n통해 검색 결과의 품질을 높일 수 있다.</p>\n<hr>\n<p>[참고 사이트]<br>\n<a href=\"https://blog.lael.be/post/3056\">https://blog.lael.be/post/3056</a><br>\n<a href=\"https://needjarvis.tistory.com/345\">https://needjarvis.tistory.com/345</a></p>","frontmatter":{"title":"Inverted index (역색인)","date":"April 24, 2019"}}},"pageContext":{"slug":"/data-structure/inverted-index/","previous":null,"next":{"fields":{"slug":"/data-structure/union-find/"},"frontmatter":{"title":"Union-Find (유니온 파인드)"}}}},
    "staticQueryHashes": ["3078735561","3128451518"]}